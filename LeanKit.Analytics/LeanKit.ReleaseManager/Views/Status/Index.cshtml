@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Layouts/_Layout.cshtml";
}

<h2>Live Status</h2>

<ul id="metrics-list">
    <li class="stop-start" id="stop-start"></li>
    <li class="time-select">
        <select id="query-time-select">
            <option data-time-limit="step=6e4&limit=15">Last 15mins</option>
            <option data-time-limit="step=6e4&limit=30">Last 30mins</option>
            <option data-time-limit="step=6e4&limit=60">Last Hour</option>
            <option data-time-limit="step=3e5&limit=48">Last 4 Hours</option>
            <option data-time-limit="step=36e5&limit=24">Last 24 Hours</option>
        </select>
    </li>
</ul>

<h3 id="metric-title">&nbsp;</h3>
<ul id="metric-drilldown-list"></ul>

<div id="graphs"></div>

@section Stylesheet
{
    <style>
        h1 { margin: 0; }

        iframe {width: 100%;height: 250px; }

        .graph-container {margin-left: 0;background-color: transparent;padding: 0;height: auto; width: auto; }

        .graph-container.half {width: 50%;float: left; }

        .graph-title {font-size: 1.2em;min-height: 23px;font-weight: bold; }
    </style>
}

@section Javascript
{
    <script src="~/assets/js/page-capture.js"></script>
    <script src="~/assets/js/lib/jquery-2.0.0.min.js"></script>
    <script src="~/assets/js/lib/TLRGRP.core.js"></script>
    <script src="~/assets/js/lib/TLRGRP.BADGER.utilities.js"></script>
    <script src="~/assets/js/status-charts/TLRGRP.dashboards.Builder.js"></script>
    <script src="~/assets/js/status/TLRGRP.BADGER.Dashboard.WebHosts.js"></script>
    <script src="~/assets/js/status/TLRGRP.BADGER.Dashboard.Overview.js"></script>
	
    <script type="text/javascript">
        (function() {
            var allViews = {};
            var dashboards = {
                'Overview': new TLRGRP.BADGER.Dashboard.Overview(),
                'Webhosts': new TLRGRP.BADGER.Dashboard.WebHosts()
            };
            var currentMetric;
            var currentSubmetric;
            var selectedView;
            var currentStep;
            var currentLimit;
            var graphs;
            var metricsList = $('#metrics-list');
            var timeSelect = $('#query-time-select');

            for (var dashboard in dashboards) {
                if (!dashboards.hasOwnProperty(dashboard)) {
                    continue;
                }
                
                dashboards[dashboard].appendViews(allViews);
            }

            currentMetric = TLRGRP.BADGER.Utilities.getParameterByName('metric') || 'Overview';
            currentSubmetric = TLRGRP.BADGER.Utilities.getParameterByName('subMetric');

            if (!currentSubmetric && allViews[currentMetric] && allViews[currentMetric].defaultSubMetric) {
                currentSubmetric = allViews[currentMetric].defaultSubMetric;
            }

            if (allViews[currentMetric]) {
                if (allViews[currentMetric].subMetrics && allViews[currentMetric].subMetrics[currentSubmetric]) {
                    selectedView = allViews[currentMetric].subMetrics[currentSubmetric];
                } else {
                    selectedView = 'Overview';
                }
            }

            currentStep = TLRGRP.BADGER.Utilities.getParameterByName('step') || (selectedView && selectedView.defaults && selectedView.defaults.step ? selectedView.defaults.step : '6e4');
            currentLimit = TLRGRP.BADGER.Utilities.getParameterByName('limit') || (selectedView && selectedView.defaults && selectedView.defaults.limit ? selectedView.defaults.limit : 60);


            var currentTimitSelectDataString = 'step=' + currentStep + '&limit=' + currentLimit;


            timeSelect.children().each(function() {
                var currentItem = $(this);

                if (currentItem.data('timeLimit') === currentTimitSelectDataString) {
                    currentItem.prop('selected', true);
                    return false;
                }
            });

            for (var m in allViews) {
                var name = allViews[m].name || m;

                if (!allViews.hasOwnProperty(m)) {
                    continue;
                }

                if (currentMetric === m) {
                    metricsList.append('<li class="selected-metric">' + name + '</li>');
                } else {
                    metricsList.append('<li><a href="/Status?metric=' + m + '">' + name + '</a></li>');
                }
            }

            $('#metric-title').text(currentMetric);

            if (allViews[currentMetric] && allViews[currentMetric].subMetrics) {
                var subMetricList = $('#metric-drilldown-list');

                for (var sm in allViews[currentMetric].subMetrics) {
                    var name = allViews[currentMetric].subMetrics[sm].name || sm;

                    if (!allViews[currentMetric].subMetrics.hasOwnProperty(sm)) {
                        continue;
                    }

                    if (currentSubmetric === sm) {
                        subMetricList.append('<li class="selected-metric">' + name + '</li>');
                    } else {
                        subMetricList.append('<li><a href="/Status?metric=' + currentMetric + '&subMetric=' + sm + '">' + name + '</a></li>');
                    }
                }
            }

            timeSelect.on('change', function() {
                var timeLimit = '&' + $(this).children(':selected:first').data('timeLimit');
                window.location = '/Status?metric=' + currentMetric + timeLimit;
            });

            $('#stop-start').on('click', function() {
                var button = $(this),
                    stop;

                if (button.hasClass('stopped')) {
                    button.removeClass('stopped');
                } else {
                    button.addClass('stopped');
                    stop = true;
                }

                for (var x = 0; x < window.frames.length; x++) {
                    window.frames[x].postMessage(stop ? 'stop' : 'start', '*');
                }
            });

            graphs = (currentMetric === 'Overview' ? dashboards['Overview'] : dashboards['Webhosts']).getGraphs(selectedView, currentStep, currentLimit);

            new TLRGRP.dashboards.Builder($('#graphs'), graphs);
        })();
    </script>
}