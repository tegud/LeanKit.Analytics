@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Layouts/_Layout.cshtml";
}

<h2>Live Status</h2>

<ul id="metrics-list">
    <li class="stop-start" id="stop-start"></li>
    <li class="time-select">
        <select id="query-time-select">
            <option data-time-limit="step=6e4&limit=15">Last 15mins</option>
            <option data-time-limit="step=6e4&limit=30">Last 30mins</option>
            <option data-time-limit="step=6e4&limit=60">Last Hour</option>
            <option data-time-limit="step=3e5&limit=48">Last 4 Hours</option>
            <option data-time-limit="step=36e5&limit=24">Last 24 Hours</option>
        </select>
    </li>
    <li><a href="/Status">Overview</a></li>
</ul>

<div id="graphs"></div>

@section Stylesheet
{
    <style>
        h1 { margin: 0; }

        iframe {width: 100%;height: 250px; }

        .graph-container {margin-left: 0;background-color: transparent;padding: 0;height: auto }

        .graph-container.half {width: 50%;float: left; }

        .graph-title {font-size: 1.2em;min-height: 23px;font-weight: bold; }
    </style>
}

@section Javascript
{
    <script src="~/assets/js/page-capture.js"></script>
    <script src="~/assets/js/lib/jquery-2.0.0.min.js"></script>
    <script src="~/assets/js/lib/TLRGRP.core.js"></script>
    <script src="~/assets/js/status-charts/TLRGRP.dashboards.Builder.js"></script>
	
    <script type="text/javascript">
        (function() {
            var maxPerGroup = 5,
                metricGroups = [],
                currentMetricGroup = -1,
                colors = ['steelblue', 'red', 'orange', 'green', 'purple'],
                metrics = {
                    'RequestsExecuting': {
                        name: 'Requests Executing',
                        metric: 'ASPNET2__Total_RequestsExecuting',
                        group: 'ASPNET2',
                        eventType: 'lr_web_wmi',
                        chartOptions: {
                            yAxisLabel: 'requests',
                        }
                    },
                    'ExecutionTime': {
                        name: 'Execution Time',
                        metric: 'ASPNET2__Total_RequestExecutionTime',
                        group: 'ASPNET2',
                        eventType: 'lr_web_wmi',
                        chartOptions: {
                            dimensions: {
                                margin: { left: 50 }
                            },
                            yAxisLabel: 'time (s)',
                        }
                    },
                    'CPU': {
                        name: 'CPU',
                        metric: 'cpu__Total_PercentProcessorTime',
                        group: 'cpu',
                        eventType: 'lr_web_wmi',
                        chartOptions: {
                            axisExtents: {
                                y: [0, 100]
                            },
                            yAxisLabel: '%',
                        }
                    }
                },
                currentMetric,
                currentStep,
                currentLimit,
                graphs = [],
                metricsList = $('#metrics-list'),
                timeSelect = $('#query-time-select');

            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                if (results == null) {
                    return "";
                } else {
                    return decodeURIComponent(results[1].replace(/\+/g, " "));
                }
            }

            function getMachineName(machineNumber) {
                var machineNumberLength = (machineNumber + '').length;
                var id = machineNumber;

                for (var x = machineNumberLength; x < 3; x++) {
                    id = '0' + id;
                }

                return 'TELWEB' + id + 'P';
            }

            function buildExpression(machineName) {
                var metric = metrics[currentMetric].metric;
                var metricGroup = metrics[currentMetric].group;
                var eventType = metrics[currentMetric].eventType;
                var stepAndLimit = '&step=' + currentStep + '&limit=' + currentLimit;

                return ['median(' + eventType + '(' + metric + ')',
                    '.eq(source_host,"' + machineName + '")',
                    '.eq(metricGroup,"' + metricGroup + '"))',
                    stepAndLimit].join('');
            }

            currentMetric = getParameterByName('metric') || 'RequestsExecuting';
            currentStep = getParameterByName('step') || '6e4';
            currentLimit = getParameterByName('limit') || 60;

            var currentTimitSelectDataString = 'step=' + currentStep + '&limit=' + currentLimit;

            timeSelect.children().each(function() {
                var currentItem = $(this);

                if (currentItem.data('timeLimit') === currentTimitSelectDataString) {
                    currentItem.prop('selected', true);
                    return false;
                }
            });

            timeSelect.on('change', function() {
                var timeLimit = '&' + $(this).children(':selected:first').data('timeLimit');
                window.location = '/Status?metric=' + currentMetric + timeLimit;
            });

            for (var m in metrics) {
                if (!metrics.hasOwnProperty(m)) {
                    continue;
                }

                if (currentMetric === m) {
                    metricsList.append('<li class="selected-metric">' + metrics[m].name + '</li>');
                } else {
                    metricsList.append('<li><a href="/Status?metric=' + m + '">' + metrics[m].name + '</a></li>');
                }
            }

            for (var i = 0; i < 19; i++) {
                if (!(i % maxPerGroup)) {
                    metricGroups[++currentMetricGroup] = [];
                }

                metricGroups[currentMetricGroup][metricGroups[currentMetricGroup].length] = i + 1;
            }

            for (var n = 0; n < metricGroups.length; n++) {
                var expressions = [];
                var title = metrics[currentMetric].name + ' by hosts ';

                for (var m = 0; m < metricGroups[n].length; m++) {
                    var machineId = metricGroups[n][m];
                    var machineName = getMachineName(machineId);

                    if (!m) {
                        title += machineId + '-';
                    } else if (m === metricGroups[n].length - 1) {
                        title += machineId;
                    }

                    expressions[expressions.length] = {
                        id: machineName,
                        title: machineName,
                        color: colors[m % colors.length],
                        expression: buildExpression(machineName)
                    };
                }

                graphs[graphs.length] = {
                    title: title,
                    'class': 'half',
                    expressions: expressions,
                    chartOptions: metrics[currentMetric].chartOptions || {}
                };
            }

            $('#stop-start').on('click', function() {
                var button = $(this),
                    stop;

                if (button.hasClass('stopped')) {
                    button.removeClass('stopped');
                } else {
                    button.addClass('stopped');
                    stop = true;
                }
                
                for (var x = 0; x < window.frames.length; x++) {
                    window.frames[x].postMessage(stop ? 'stop' : 'start', '*');
                }
            });

            new TLRGRP.dashboards.Builder($('#graphs'), graphs);
        })();
    </script>
}