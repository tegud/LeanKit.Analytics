@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Layouts/_Layout.cshtml";
}

<h2>Live Status</h2>

<ul id="metrics-list">
    <li class="stop-start" id="stop-start"></li>
    <li class="time-select">
        <select id="query-time-select">
            <option data-time-limit="step=6e4&limit=15">Last 15mins</option>
            <option data-time-limit="step=6e4&limit=30">Last 30mins</option>
            <option data-time-limit="step=6e4&limit=60">Last Hour</option>
            <option data-time-limit="step=3e5&limit=48">Last 4 Hours</option>
            <option data-time-limit="step=36e5&limit=24">Last 24 Hours</option>
        </select>
    </li>
    <li><a href="/Status">Overview</a></li>
</ul>

<h3 id="metric-title">&nbsp;</h3>
<ul id="metric-drilldown-list"></ul>

<div id="graphs"></div>

@section Stylesheet
{
    <style>
        h1 { margin: 0; }

        iframe {width: 100%;height: 250px; }

        .graph-container {margin-left: 0;background-color: transparent;padding: 0;height: auto; width: auto; }

        .graph-container.half {width: 50%;float: left; }

        .graph-title {font-size: 1.2em;min-height: 23px;font-weight: bold; }
    </style>
}

@section Javascript
{
    <script src="~/assets/js/page-capture.js"></script>
    <script src="~/assets/js/lib/jquery-2.0.0.min.js"></script>
    <script src="~/assets/js/lib/TLRGRP.core.js"></script>
    <script src="~/assets/js/status-charts/TLRGRP.dashboards.Builder.js"></script>
	
    <script type="text/javascript">
        (function() {
            var colors = ['steelblue', 'red', 'orange', 'green', 'purple'],
                diskExpression = function(eventType, metric, machineName, metricGroup, stepAndLimit) {
                    return ['min(' + eventType + '(' + metric + ')',
                        '.eq(source_host,"' + machineName + '")',
                        '.eq(metricGroup,"' + metricGroup + '")) / 1073741824',
                        stepAndLimit].join('');
                },
                dashboards = {
                    'Requests': {
                        defaultSubMetric: 'RequestsExecuting',
                        subMetrics: {
                            'RequestsExecuting': {
                                name: 'Requests Executing',
                                metric: 'ASPNET2__Total_RequestsExecuting',
                                group: 'ASPNET2',
                                eventType: 'lr_web_wmi',
                                chartOptions: {
                                    yAxisLabel: 'requests',
                                }
                            },
                            'RequestsPerSec': {
                                name: 'Requests /s',
                                metric: 'ASPNET2__Total_RequestsPerSec',
                                group: 'ASPNET2',
                                eventType: 'lr_web_wmi',
                                chartOptions: {
                                    yAxisLabel: 'requests',
                                }
                            },
                            'ExecutionTime': {
                                name: 'Execution Time',
                                metric: 'ASPNET2__Total_RequestExecutionTime',
                                group: 'ASPNET2',
                                eventType: 'lr_web_wmi',
                                chartOptions: {
                                    dimensions: {
                                        margin: { left: 50 }
                                    },
                                    yAxisLabel: 'time (s)',
                                }
                            }
                        }
                    },
                    'Performance': {
                        defaultSubMetric: 'CPU',
                        subMetrics: {
                            'CPU': {
                                name: 'CPU',
                                metric: 'cpu__Total_PercentProcessorTime',
                                group: 'cpu',
                                eventType: 'lr_web_wmi',
                                chartOptions: {
                                    axisExtents: {
                                        y: [0, 100]
                                    },
                                    yAxisLabel: '%',
                                }
                            }
                        }
                    },
                    'Disk': {
                        defaultSubMetric: 'DiskSpaceD',
                        subMetrics: {
                            'DiskSpaceC': {
                                name: 'Disk (C:)',
                                metric: 'disk_0_FreeSpace',
                                group: 'disk',
                                eventType: 'lr_web_wmi',
                                chartOptions: {
                                    yAxisLabel: 'GB Remaining',
                                },
                                defaults: {
                                    step: '3e5',
                                    limit: 48
                                },
                                expressionBuilder: diskExpression
                            },
                            'DiskSpaceD': {
                                name: 'Disk (D:)',
                                metric: 'disk_1_FreeSpace',
                                group: 'disk',
                                eventType: 'lr_web_wmi',
                                chartOptions: {
                                    yAxisLabel: 'GB Remaining',
                                },
                                defaults: {
                                    step: '3e5',
                                    limit: 48
                                },
                                expressionBuilder: diskExpression
                            }
                        }
                    }
                },
                currentMetric,
                currentSubmetric,
                selectedDashboard,
                currentStep,
                currentLimit,
                graphs,
                metricsList = $('#metrics-list'),
                timeSelect = $('#query-time-select');

            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.search);
                if (results == null) {
                    return "";
                } else {
                    return decodeURIComponent(results[1].replace(/\+/g, " "));
                }
            }

            function getMachineName(machineNumber) {
                var machineNumberLength = (machineNumber + '').length;
                var id = machineNumber;

                for (var x = machineNumberLength; x < 3; x++) {
                    id = '0' + id;
                }

                return 'TELWEB' + id + 'P';
            }

            function buildExpression(machineName) {
                var metric = selectedDashboard.metric;
                var metricGroup = selectedDashboard.group;
                var eventType = selectedDashboard.eventType;
                var stepAndLimit = '&step=' + currentStep + '&limit=' + currentLimit;

                if (selectedDashboard.expressionBuilder && $.isFunction(selectedDashboard.expressionBuilder)) {
                    return selectedDashboard.expressionBuilder(eventType, metric, machineName, metricGroup, stepAndLimit);
                }

                return ['median(' + eventType + '(' + metric + ')',
                    '.eq(source_host,"' + machineName + '")',
                    '.eq(metricGroup,"' + metricGroup + '"))',
                    stepAndLimit].join('');
            }

            function metricGroupedByHost() {
                var maxPerGroup = 5;
                var metricGroups = [];
                var currentMetricGroup = -1;
                var graphs = [];

                for (var i = 0; i < 19; i++) {
                    if (!(i % maxPerGroup)) {
                        metricGroups[++currentMetricGroup] = [];
                    }

                    metricGroups[currentMetricGroup][metricGroups[currentMetricGroup].length] = i + 1;
                }

                for (var n = 0; n < metricGroups.length; n++) {
                    var expressions = [];
                    var title = selectedDashboard.name + ' by hosts ';

                    for (var m = 0; m < metricGroups[n].length; m++) {
                        var machineId = metricGroups[n][m];
                        var machineName = getMachineName(machineId);

                        if (!m) {
                            title += machineId + '-';
                        } else if (m === metricGroups[n].length - 1) {
                            title += machineId;
                        }

                        expressions[expressions.length] = {
                            id: machineName,
                            title: machineName,
                            color: colors[m % colors.length],
                            expression: buildExpression(machineName)
                        };
                    }

                    graphs[graphs.length] = {
                        title: title,
                        'class': 'half',
                        expressions: expressions,
                        chartOptions: dashboards[currentMetric].chartOptions || {}
                    };
                }

                return graphs;
            }

            currentMetric = getParameterByName('metric') || 'Overview';
            currentSubmetric = getParameterByName('subMetric');

            if (!currentSubmetric && dashboards[currentMetric] && dashboards[currentMetric].defaultSubMetric) {
                currentSubmetric = dashboards[currentMetric].defaultSubMetric;
            }

            if (dashboards[currentMetric].subMetrics[currentSubmetric]) {
                selectedDashboard = dashboards[currentMetric].subMetrics[currentSubmetric];
            }

            currentStep = getParameterByName('step') || (dashboards[currentMetric] && dashboards[currentMetric].defaults && dashboards[currentMetric].defaults.step ? dashboards[currentMetric].defaults.step : '6e4');
            currentLimit = getParameterByName('limit') || (dashboards[currentMetric] && dashboards[currentMetric].defaults && dashboards[currentMetric].defaults.limit ? dashboards[currentMetric].defaults.limit : 60);

            var currentTimitSelectDataString = 'step=' + currentStep + '&limit=' + currentLimit;


            timeSelect.children().each(function() {
                var currentItem = $(this);

                if (currentItem.data('timeLimit') === currentTimitSelectDataString) {
                    currentItem.prop('selected', true);
                    return false;
                }
            });

            for (var m in dashboards) {
                var name = dashboards[m].name || m;

                if (!dashboards.hasOwnProperty(m)) {
                    continue;
                }

                if (currentMetric === m) {
                    metricsList.append('<li class="selected-metric">' + name + '</li>');
                } else {
                    metricsList.append('<li><a href="/Status?metric=' + m + '">' + name + '</a></li>');
                }
            }

            $('#metric-title').text(currentMetric);

            if (dashboards[currentMetric] && dashboards[currentMetric].subMetrics) {
                var subMetricList = $('#metric-drilldown-list');

                for (var sm in dashboards[currentMetric].subMetrics) {
                    var name = dashboards[currentMetric].subMetrics[sm].name || sm;

                    if (!dashboards[currentMetric].subMetrics.hasOwnProperty(sm)) {
                        continue;
                    }

                    if (currentSubmetric === sm) {
                        subMetricList.append('<li class="selected-metric">' + name + '</li>');
                    } else {
                        subMetricList.append('<li><a href="/Status?metric=' + currentMetric + '&subMetric=' + sm + '">' + name + '</a></li>');
                    }
                }
            }

            timeSelect.on('change', function() {
                var timeLimit = '&' + $(this).children(':selected:first').data('timeLimit');
                window.location = '/Status?metric=' + currentMetric + timeLimit;
            });

            $('#stop-start').on('click', function() {
                var button = $(this),
                    stop;

                if (button.hasClass('stopped')) {
                    button.removeClass('stopped');
                } else {
                    button.addClass('stopped');
                    stop = true;
                }

                for (var x = 0; x < window.frames.length; x++) {
                    window.frames[x].postMessage(stop ? 'stop' : 'start', '*');
                }
            });

            if (currentMetric === 'Overview') {
                graphs = [{
                        title: 'Traffic by Type',
                        'class': 'half',
                        expressions: [{
                                id: 'iis-all',
                                title: 'All Requests',
                                color: colors[0],
                                expression: 'sum(lr_web_request)&' + currentTimitSelectDataString
                            },
                            {
                                id: 'iis-bot',
                                title: 'Bot Requests',
                                color: colors[1],
                                expression: 'sum(lr_web_request.eq(isbot,true))&' + currentTimitSelectDataString
                            },
                            {
                                id: 'iis-mobile',
                                title: 'Mobile Requests',
                                color: colors[4],
                                expression: 'sum(lr_web_request.eq(isbot,false).eq(ismobile,true))&' + currentTimitSelectDataString
                            }],
                        chartOptions: {
                            dimensions: {
                                margin: { left: 50 }
                            }
                        }
                    },
                    {
                        title: 'Traffic by Type (IIS)',
                        'class': 'half',
                        expressions: [{
                            id: 'iis-main-all',
                            title: 'All Requests',
                            color: colors[0],
                            expression: 'sum(lr_web_iis)&' + currentTimitSelectDataString
                        }],
                        chartOptions: {}
                    }];
            } else {
                graphs = metricGroupedByHost();
            }

            new TLRGRP.dashboards.Builder($('#graphs'), graphs);
        })();
    </script>
}